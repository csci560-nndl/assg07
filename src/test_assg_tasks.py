import numpy as np
import pandas as pd
import sklearn
#import unittest
from twisted.trial import unittest
#from assg_tasks import rnn_cell_forward
#from assg_tasks import rnn_forward
#from assg_tasks import lstm_cell_forward
#from assg_tasks import lstm_forward


class test_rnn_cell_forward(unittest.TestCase):

    def setUp(self):
        pass

    def test_example_case(self):
        np.random.seed(1)
        batch_size = 10
        n_x = 3
        n_a = 5
        n_y = 2
        x_t = np.random.randn(batch_size, n_x)
        a_prev = np.random.randn(batch_size, n_a)
        W_a = np.random.randn(n_x, n_a)
        U_a = np.random.randn(n_a, n_a)
        b_a = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a_t, y_t = rnn_cell_forward(x_t, a_prev, (W_a, U_a, b_a, W_y, b_y))

        self.assertEqual(a_t.shape, (10, 5))
        expected_a_t = np.array(
           [[ 0.74300289, -0.94534347,  0.9829654 ,  0.99697347, -0.99588483],
            [-0.99993367, -0.97854626,  0.94624453,  0.94579927,  0.0394243 ],
            [-0.97827451, -0.92147156,  0.99381922,  0.65230854, -0.66903135],
            [-0.99523806, -0.06488166, -0.28849778,  0.99917567, -0.88942078],
            [ 0.97054882, -0.93853384,  0.92825359,  0.77745675, -0.90964872],
            [-0.98855564,  0.74855823, -0.36229547,  0.99081501, -0.99024915],
            [-0.96724128,  0.59298487,  0.6945067 ,  0.99981247, -0.99796145],
            [-0.75830967,  0.94288491,  0.99984994, -0.71884867, -0.89508792],
            [-0.95872629, -0.25330563,  0.77869246,  0.98623366, -0.98708243],
            [-0.38656854,  0.58310006, -0.84513974,  0.99136456, -0.99230997]]            
        )
        self.assertTrue(np.allclose(a_t, expected_a_t))
        self.assertEqual(y_t.shape, (10, 2))
        expected_y_t = np.array(
           [[0.26967968, 0.73032032],
            [0.33488653, 0.66511347],
            [0.36138607, 0.63861393],
            [0.42204273, 0.57795727],
            [0.21579613, 0.78420387],
            [0.70591033, 0.29408967],
            [0.85058335, 0.14941665],
            [0.80425477, 0.19574523],
            [0.62519071, 0.37480929],
            [0.47058495, 0.52941505]]
        )
        self.assertTrue(np.allclose(y_t, expected_y_t))


    def test_bigger_case(self):
        np.random.seed(1)
        batch_size = 64
        n_x = 4
        n_a = 8
        n_y = 16
        x_t = np.random.randn(batch_size, n_x)
        a_prev = np.random.randn(batch_size, n_a)
        W_a = np.random.randn(n_x, n_a)
        U_a = np.random.randn(n_a, n_a)
        b_a = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a_t, y_t = rnn_cell_forward(x_t, a_prev, (W_a, U_a, b_a, W_y, b_y))

        self.assertEqual(a_t.shape, (64, 8))
        expected_a_t = np.array(
           [[-0.99974245,  0.99095451, -0.99996072,  0.9996173 ,  0.12281603,
                -0.91837591,  0.9998171 ,  0.99994882],
            [ 0.96867134,  0.69758509, -0.99640994,  0.99992698, -0.99937412,
                0.99863204,  0.9977813 , -0.66298642],
            [ 0.99931279, -0.05543336, -0.99805793, -0.95260108, -0.99271206,
                0.99984889, -0.98944585, -0.99906917],
            [ 0.28835208, -0.99727906,  0.06199524,  0.98174492, -0.96794486,
                0.9917926 , -0.99069661, -0.98818214],
            [-0.89844201, -0.6826127 ,  0.86385307,  0.97928269,  0.02027795,
                -0.68230018,  0.99626219, -0.99500658],
            [-0.96666459, -0.99466865, -0.95143489,  0.27016671, -0.76219712,
                -0.99999598,  0.66614658,  0.99755729],
            [-0.98371104,  0.99779731, -0.92840554,  0.93438338, -0.68591563,
                0.77412735,  0.99999932,  0.72161614],
            [ 0.87955365, -0.8141071 , -0.98757851,  0.78340662,  0.95837978,
                0.37404143, -0.94071989, -0.62501978],
            [ 0.99977308,  0.78058016,  0.85534996,  0.41244048, -0.83618245,
                0.99776102, -0.33799502, -0.99999907],
            [ 0.98042503, -0.69315187,  0.50123346, -0.99962423,  0.54103325,
                0.61308154,  0.3073332 ,  0.99384531],
            [ 0.11210061, -0.87229114,  0.99999723, -0.89611488,  0.93722809,
                0.98367044, -0.46391408, -0.99999999],
            [-0.12076938,  0.48729777,  0.98695362, -0.26131821,  0.36257842,
                -0.95849336,  0.99987852, -0.13484836],
            [-0.97521472, -0.79992234, -0.78948989, -0.80448194,  0.65451339,
                -0.93977387,  0.94114627, -0.774523  ],
            [-0.98558485,  0.97823393,  0.78558423, -0.98349164,  0.98941175,
                -0.66110053,  0.97078689,  0.99460699],
            [-0.94690978,  0.67605529,  0.80731705, -0.99369601,  0.89584888,
                -0.0391929 ,  0.99944131,  0.9993823 ],
            [-0.65858743, -0.99590999, -0.9905315 , -0.35336874, -0.69611352,
                -0.99948219, -0.99997138,  0.97344185],
            [ 0.98233166, -0.99868209,  0.26896467, -0.91423768,  0.15825049,
                -0.98586342, -0.53914503, -0.99999794],
            [-0.99984189,  0.99978407,  0.99778771,  0.66164605,  0.73167772,
                0.91418543,  0.9999996 , -0.99999979],
            [-0.99960527, -0.99996707, -0.66860163,  0.97128549,  0.12712539,
                -0.91663571, -0.96372176, -0.999998  ],
            [-0.99737925, -0.98368079, -0.86308654,  0.14829423,  0.98386405,
                -0.99998792,  0.88591384, -0.7530256 ],
            [ 0.99973815,  0.83172307,  0.00828135, -0.99983429,  0.98971903,
                0.99969187,  0.93170551, -0.99998985],
            [-0.62151566,  0.99913759, -0.32547049, -0.87728705, -0.22441526,
                -0.9104223 ,  0.99730354,  0.99947964],
            [ 0.99990561, -0.87038495,  0.54612442, -0.9998454 , -0.21809105,
                0.99957575, -0.95333838, -0.86429974],
            [ 0.37568741, -0.99337875,  0.91686548,  0.9757138 , -0.94494673,
                0.23458064, -0.99974571, -0.9992819 ],
            [-0.99966305,  0.99752451,  0.92171794, -0.75154699,  0.8890717 ,
                -0.99781035,  0.99999955,  0.99880426],
            [-0.91711694, -0.70014421,  0.98004898, -0.9994956 ,  0.13617427,
                -0.9942522 ,  0.99895637,  0.12582963],
            [-0.33485495, -0.91532887, -0.33148021,  0.96045734, -0.98565061,
                0.28762165, -0.81491303,  0.99351348],
            [-0.9994308 ,  0.99963561,  0.09618226, -0.99305366,  0.97446519,
                -0.99997626,  0.99999996, -0.07495981],
            [-0.69643802,  0.50466566,  0.3658357 ,  0.99970396, -0.99804339,
                0.99990333, -0.51905974,  0.69553955],
            [ 0.98772628, -0.99722782, -0.99051493,  0.99829134,  0.15320671,
                0.91260775, -0.99995265, -0.9983765 ],
            [ 0.86592039, -0.99998505,  0.91058168,  0.02812453,  0.93301679,
                -0.19280254, -0.99999811, -0.99924811],
            [ 0.99963169, -0.93026453,  0.96180376, -0.99999711, -0.7123556 ,
                0.97008009, -0.99659622,  0.98669469],
            [ 0.99961175, -0.86776179,  0.83965362, -0.99720716, -0.75401273,
                0.98557782, -0.99894448, -0.99945747],
            [ 0.94845921, -0.16312531, -0.75457361, -0.6941844 , -0.82009142,
                0.98838339, -0.99961786,  0.99999688],
            [ 0.99948386,  0.81328719, -0.99901809, -0.18703679,  0.83192026,
                0.99799549,  0.97256428, -0.99344604],
            [-0.33119668, -0.99716982, -0.23784618,  0.45655474, -0.89225679,
                -0.99974917, -0.91709478, -0.99907663],
            [-0.99999991, -0.99999611,  0.99940623,  0.99995301,  0.94172093,
                -0.99112023,  0.28624983, -0.93992611],
            [-0.76533387, -0.96065694, -0.80704268,  0.87682152, -0.79452214,
                0.99634154, -0.999985  , -0.9928281 ],
            [ 0.99817175, -0.3554044 ,  0.99073863, -1.        ,  0.9999856 ,
                0.9999999 , -0.99950848, -0.99798172],
            [ 0.30905726,  0.39092964,  0.99417525, -0.73488659, -0.53810741,
                0.99992336,  0.43906169, -0.99994602],
            [-0.28745789, -0.8414445 , -0.93342289,  0.9997507 , -0.96092673,
                -0.93690054, -0.24912597, -0.96019051],
            [-0.30399416, -0.99951547, -0.99992965,  0.99916743, -0.28404645,
                -0.99875251,  0.05344221,  0.52248509],
            [-0.94602695,  0.99997188,  0.72196888,  0.91846527,  0.94383277,
                0.89110378,  0.99999999, -0.99989622],
            [-0.99999975, -0.82109101,  0.82008039,  0.78791333,  0.9896636 ,
                -0.6710943 ,  0.99997245, -0.99678432],
            [-0.99996261, -0.99823904, -0.86439596,  0.99888164,  0.88539433,
                -0.99530296,  0.99981097, -0.99997708],
            [ 0.98492234, -0.95897435, -0.71497835, -0.24344942, -0.57580861,
                -0.98336509, -0.93260212,  0.99976986],
            [ 0.90472241, -0.94679166, -0.99608389,  0.99755046, -0.94982792,
                -0.9928156 ,  0.76806583, -0.98216001],
            [ 0.25312087, -0.99904666, -0.10890671, -0.49265455,  0.85716329,
                0.58568645, -0.99047524, -0.99903015],
            [-0.99999117, -0.99276942, -0.998981  , -0.54732876,  0.98726346,
                -0.97491275, -0.60212274, -0.95655722],
            [ 0.77156288, -0.99445566,  0.96727186, -0.87771207,  0.99272781,
                0.99704447, -0.15658531, -0.99806606],
            [-0.99638011, -0.90117333, -0.89997598, -0.68977486,  0.98111608,
                -0.99999999,  0.99831986,  0.97956733],
            [ 0.80385383,  0.99379816, -0.64780743,  0.99878407, -0.93010067,
                -0.85619031, -0.21911443, -0.99999411],
            [-0.84520815,  0.74378573, -0.17779421, -0.99931636, -0.89577713,
                -0.99260448,  0.85642271,  0.90361476],
            [-0.99999998,  0.76376839,  0.99667998,  0.99999026, -0.13315622,
                -0.99993169,  0.99998757,  0.99355377],
            [ 0.19266574, -0.97461892, -0.9656331 ,  0.16281539,  0.1067451 ,
                0.63004275, -0.93264257, -0.51089773],
            [ 0.78961916, -0.25266098, -0.75478693, -0.99985294,  0.69207785,
                0.97310699,  0.74845994, -0.98441666],
            [-0.99999991, -0.99889637,  0.81583416, -0.97092478,  0.97180953,
                -0.99999999,  0.24845239,  0.99770903],
            [ 0.84050529,  0.33750208,  0.9079031 , -0.9205009 ,  0.54463784,
                0.9354118 , -0.14540632, -0.79074394],
            [-0.99998035, -0.96267766,  0.99575051, -0.99942664,  0.94971595,
                -0.76446301,  0.99879195, -0.99986291],
            [-0.54755993,  0.99972975,  0.19994051,  0.99184913,  0.41905586,
                -0.99267753,  0.99999968,  0.48757622],
            [-0.16006005, -0.80283821, -0.97009905,  0.89161422, -0.9249621 ,
                0.6065572 , -0.99965373, -0.99804846],
            [ 0.22220867, -0.9731809 ,  0.40581836, -0.22460981, -0.86422266,
                0.7596539 , -0.92499505,  0.99536205],
            [-0.99036538,  0.36230233, -0.99606033,  0.99943712,  0.90284565,
                0.5025741 ,  0.94939637, -0.74734016],
            [-0.74285311, -0.99496233, -0.82205333,  0.00260173, -0.99981862,
                -0.99999611, -0.99995191,  0.99999956]]      
        )
        self.assertTrue(np.allclose(a_t, expected_a_t))
        self.assertEqual(y_t.shape, (64, 16))
        expected_y_t = np.array(
               [[1.36932840e-03, 2.24899852e-04, 9.44585033e-03, 1.20386988e-01,
                    4.47383501e-04, 2.02427246e-03, 1.13737483e-02, 2.82510473e-04,
                    4.80142396e-02, 2.68190194e-01, 1.50932895e-01, 2.80598940e-02,
                    3.79231864e-03, 6.55831632e-02, 2.85637147e-01, 4.23516677e-03],
                [8.83621994e-03, 6.81722599e-05, 8.42358577e-03, 3.29362741e-02,
                    2.59657470e-06, 3.83014132e-03, 1.27311055e-03, 3.88219751e-03,
                    3.38968411e-03, 1.35674467e-02, 4.26519203e-01, 1.87084948e-04,
                    1.72981679e-04, 5.98652199e-02, 4.35423695e-01, 1.62238630e-03],
                [5.58983421e-02, 3.23292953e-02, 2.58372966e-03, 4.71895765e-03,
                    1.62635711e-02, 7.46447760e-03, 1.00412266e-03, 9.54896257e-03,
                    8.27437241e-01, 1.86965190e-02, 1.64927135e-03, 4.73245373e-03,
                    1.79672469e-03, 4.34387331e-03, 4.35229817e-03, 7.18015971e-03],
                [1.13874290e-01, 2.30742160e-03, 5.82400356e-02, 6.54059009e-03,
                    5.75559465e-03, 2.01151478e-02, 2.49347120e-03, 1.41564360e-01,
                    1.76937601e-02, 2.73541040e-01, 5.00414035e-02, 7.95414186e-04,
                    7.03405302e-04, 2.53453242e-01, 3.80585617e-02, 1.48222629e-02],
                [1.38582688e-02, 7.46940154e-03, 5.24726895e-03, 4.92552163e-03,
                    1.55647879e-01, 2.62649302e-04, 7.14438680e-02, 2.88784575e-01,
                    6.36033909e-03, 3.99893811e-01, 6.20621595e-03, 1.25859872e-03,
                    1.91741670e-04, 4.50628036e-03, 1.26817478e-02, 2.12618327e-02]]
        )
        self.assertTrue(np.allclose(y_t[5:10], expected_y_t))


class test_rnn_forward(unittest.TestCase):

    def setUp(self):
        pass

    def test_example_case(self):
        np.random.seed(1)
        batch_size = 10
        sequence_length = 8
        n_x = 3
        n_a = 5
        n_y = 2
        x = np.random.randn(batch_size, sequence_length, n_x)
        a_init = np.random.randn(batch_size, n_a)

        W_a = np.random.randn(n_x, n_a)
        U_a = np.random.randn(n_a, n_a)
        b_a = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a, y = rnn_forward(x, a_init, (W_a, U_a, b_a, W_y, b_y))

        self.assertEqual(a.shape, (10, 8, 5))
        expected_a = np.array(
           [[[-0.88116628,  0.6218134 , -0.6250073 ,  0.17772692,
                -0.996114  ],
                [-0.99680512,  0.99295173,  0.96453719, -0.99745396,
                0.99987524],
                [ 0.9998107 ,  0.0771294 ,  0.58774249, -0.9861553 ,
                0.99959279],
                [ 0.99411254,  0.98351952, -0.04334938,  0.41501301,
                0.92603468],
                [ 0.99993044, -0.11366124,  0.10370179, -0.49848452,
                0.9999551 ],
                [ 0.9152265 ,  0.92873977,  0.25377418,  0.42816188,
                0.85137438],
                [ 0.99965678,  0.28898852,  0.76718392, -0.94166522,
                0.9998538 ],
                [ 0.99976927,  0.93736584,  0.1633069 , -0.7921617 ,
                0.97645861]],

            [[-0.56154578, -0.3371566 ,  0.48472478, -0.99943625,
                0.89768201],
                [ 0.9112319 ,  0.839041  , -0.75706406,  0.18729431,
                0.81280165],
                [ 0.93502568,  0.818269  ,  0.97312116, -0.79715546,
                0.99998223],
                [ 0.99999995, -0.83550505, -0.84860377, -0.97028357,
                0.97766149],
                [-0.8172909 ,  0.97466947, -0.98867177,  0.99999318,
                -0.70428802],
                [ 0.99612303, -0.99309319, -0.98721092, -0.84766039,
                0.99971879],
                [ 0.99927113, -0.96573486, -0.9995544 ,  0.99361446,
                -0.94033377],
                [ 0.88600572, -0.93703731, -0.99998197,  0.96993201,
                -0.98894776]]]
        )
        self.assertTrue(np.allclose(a[7:9], expected_a))
        self.assertEqual(y.shape, (10, 8, 2))
        expected_y = np.array(
           [[[0.55352401, 0.44647599],
                [0.02651775, 0.97348225],
                [0.34862134, 0.65137866],
                [0.96549409, 0.03450591],
                [0.71725764, 0.28274236],
                [0.93541866, 0.06458134],
                [0.32416423, 0.67583577],
                [0.71223852, 0.28776148]],

            [[0.04897803, 0.95102197],
                [0.9802877 , 0.0197123 ],
                [0.34753826, 0.65246174],
                [0.78981196, 0.21018804],
                [0.93493609, 0.06506391],
                [0.84369518, 0.15630482],
                [0.98294701, 0.01705299],
                [0.97913446, 0.02086554]]]            
        )
        self.assertTrue(np.allclose(y[7:9], expected_y))

    def test_bigger_case(self):
        np.random.seed(1)
        batch_size = 64
        sequence_length = 8
        n_x = 4
        n_a = 8
        n_y = 16
        x = np.random.randn(batch_size, sequence_length, n_x)
        a_init = np.random.randn(batch_size, n_a)

        W_a = np.random.randn(n_x, n_a)
        U_a = np.random.randn(n_a, n_a)
        b_a = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a, y = rnn_forward(x, a_init, (W_a, U_a, b_a, W_y, b_y))

        self.assertEqual(a.shape, (64, 8, 8))
        expected_a = np.array(
           [[[ 0.99063189,  0.89322947,  0.99617741,  0.93540665,
                0.99910021,  0.99326218, -0.99484339, -0.99236647],
                [ 0.97993677, -0.97840575,  0.99886389,  0.98005814,
                -0.99997334, -0.42769956,  0.95674703, -0.99766494],
                [ 0.91096495, -0.97385165, -0.99973273, -0.905419  ,
                -0.99998227,  0.99998964, -0.91949959, -0.99931992],
                [-0.99667448, -0.9973293 ,  0.99758164, -0.99242348,
                -0.99940268, -0.99999147,  0.99980561, -0.99173728],
                [-0.36060804,  0.32448078, -0.99184418, -0.99692103,
                -0.84716718,  0.9987545 ,  0.99944469, -0.85617692],
                [ 0.78575079,  0.97890195,  0.99547204,  0.57565761,
                -0.99987633,  0.99580278, -0.9848893 , -0.99961219],
                [ 0.74220933, -0.71951805, -0.99351409, -0.958162  ,
                -0.99999396, -0.9972306 ,  0.9999994 , -0.09537329],
                [ 0.19362226, -0.99876596,  0.9999775 ,  0.61262657,
                -0.99859781,  0.99716822, -0.99999362, -0.99999646]],

            [[ 0.99192361,  0.99998111, -0.99949105, -0.94237884,
                -0.95994377,  0.31828124,  0.88883382, -0.98389182],
                [ 0.63107549, -0.62851568,  0.99721309,  0.99511031,
                -0.9999998 , -0.98593086,  0.66052911, -0.46340725],
                [ 0.99764172, -0.99976716, -0.99414771,  0.86711875,
                -0.99993402,  0.9995061 ,  0.44182058, -0.90421631],
                [ 0.98344191, -0.91840521, -0.56740836,  0.99594733,
                -0.99999998,  0.50637936,  0.74476209, -0.66437575],
                [-0.78181414, -0.08004904, -0.99971668, -0.93333188,
                -0.99907375,  0.98313483, -0.87460773, -0.96529662],
                [ 0.32475839, -0.89962868,  0.99873479, -0.17318244,
                -0.99770694, -0.86708332,  0.88591541, -0.99986264],
                [ 0.97770061, -0.99994181,  0.25351984,  0.81265303,
                -0.99997758,  0.88742642,  0.99973136, -0.23017051],
                [ 0.98601592, -0.35440826, -0.88836712, -0.5842192 ,
                -0.99999031,  0.99952454,  0.18104479, -0.96445574]]]
        )
        self.assertTrue(np.allclose(a[7:9], expected_a))
        self.assertEqual(y.shape, (64, 8, 16))
        expected_y = np.array(
           [[[1.19833383e-04, 1.12616737e-05, 5.76709220e-04, 1.87088223e-06,
                3.32811873e-04, 7.58368765e-06, 1.73979986e-02, 7.42168333e-05,
                9.78975741e-01, 1.23736735e-05, 1.11272916e-03, 7.38349737e-05,
                1.03912979e-04, 1.58093475e-06, 1.19315033e-03, 4.39086524e-06],
                [7.50015301e-03, 4.87076526e-02, 7.36731030e-03, 1.47564149e-03,
                1.10769499e-02, 8.59403266e-03, 2.11294236e-01, 6.12562584e-05,
                3.49909484e-02, 3.14095326e-04, 4.69997813e-01, 6.43308094e-05,
                1.41419525e-01, 5.37293546e-02, 3.09216502e-03, 3.14534455e-04],
                [3.94512193e-05, 4.25434150e-03, 6.40389912e-05, 1.72805420e-04,
                2.85675309e-03, 9.73525558e-01, 1.69064787e-02, 1.11649193e-03,
                7.11273343e-05, 1.74053898e-05, 6.03082960e-06, 2.70289369e-04,
                7.57493058e-05, 5.59740344e-06, 4.38588833e-04, 1.79292222e-04],
                [1.36389382e-04, 9.87902948e-03, 1.80470044e-03, 3.45505253e-05,
                5.04776959e-04, 6.07330763e-02, 1.92418638e-05, 2.12465998e-05,
                1.97121070e-06, 5.37008510e-05, 5.58036366e-04, 2.42080056e-05,
                6.79268709e-03, 9.19340626e-01, 1.63778073e-05, 7.93807532e-05],
                [8.75068127e-04, 3.37756253e-02, 5.37558874e-03, 9.87813939e-03,
                5.05098580e-02, 8.50833156e-01, 7.16579840e-03, 8.02063093e-03,
                4.39134291e-04, 2.26043724e-04, 1.58448470e-03, 1.80921695e-03,
                1.71474125e-02, 1.15604199e-02, 4.57299696e-04, 3.42123333e-04],
                [2.69421869e-04, 4.31716288e-04, 1.17758789e-03, 5.72815324e-05,
                2.88906659e-01, 2.68587705e-03, 5.99677529e-01, 1.79834107e-04,
                6.17454027e-02, 5.77290909e-04, 8.47428131e-03, 2.62577901e-04,
                2.81052251e-02, 1.77252409e-04, 7.18847541e-03, 8.35876079e-05],
                [6.26062331e-04, 1.91991732e-01, 1.66485468e-03, 2.11558925e-03,
                1.20015887e-02, 7.64244884e-01, 8.47123956e-04, 7.23621325e-04,
                7.10460579e-05, 2.46402029e-03, 8.40499196e-04, 7.77821237e-04,
                5.93441347e-03, 1.05984910e-02, 2.88123008e-03, 2.21702278e-03],
                [6.11507972e-04, 2.57011814e-03, 2.46896833e-03, 5.87140384e-04,
                1.36413322e-02, 7.86762354e-02, 8.69932891e-01, 1.19054602e-03,
                4.48363034e-03, 2.05485499e-04, 9.91798556e-03, 2.58083929e-04,
                1.25327849e-02, 1.39195534e-03, 9.02982550e-04, 6.28352267e-04]],

            [[1.75119138e-03, 9.01405376e-02, 3.18273853e-03, 1.94645900e-03,
                5.26365783e-01, 2.88254811e-01, 1.98986803e-02, 1.22845970e-03,
                1.05872480e-02, 8.24198059e-04, 1.95153808e-03, 2.30893123e-03,
                3.11963453e-02, 2.17556551e-03, 1.79154859e-02, 2.72028044e-04],
                [2.89077427e-03, 2.47491316e-02, 6.71981186e-03, 9.14875880e-04,
                2.63650247e-02, 4.99083795e-03, 3.58956914e-02, 8.94113675e-05,
                8.65977426e-03, 2.88203642e-03, 5.49609540e-01, 1.23513446e-04,
                2.40442779e-01, 8.88132581e-02, 6.17157453e-03, 6.81965424e-04],
                [1.52795644e-03, 2.69568256e-02, 7.58048446e-04, 3.08231886e-02,
                1.46397695e-02, 9.54026001e-02, 7.70631267e-01, 3.57722711e-03,
                1.07990605e-02, 5.57868430e-05, 3.07610903e-02, 2.98329752e-04,
                1.10205844e-02, 1.40464301e-04, 2.33866220e-03, 2.69138634e-04],
                [3.14620463e-03, 4.16938302e-02, 2.14721626e-03, 3.04821363e-02,
                2.00978223e-02, 4.78437822e-02, 6.40357625e-01, 1.89046937e-03,
                1.80420619e-02, 2.47292904e-04, 1.49220781e-01, 2.91742848e-04,
                3.92560546e-02, 1.15125410e-03, 3.60632085e-03, 5.25404962e-04],
                [2.18955432e-05, 1.96156557e-03, 1.87516429e-04, 4.57177299e-04,
                2.55102564e-02, 9.58965781e-01, 9.65096510e-04, 8.99275853e-03,
                8.95641767e-06, 6.50107517e-05, 3.54632602e-05, 1.06632134e-03,
                1.15231338e-03, 1.77084114e-04, 2.92766638e-04, 1.40036477e-04],
                [4.56704426e-03, 1.22391722e-01, 1.38683743e-02, 5.13633163e-04,
                1.32263529e-02, 1.12017756e-01, 9.34332746e-03, 1.01632810e-04,
                1.73533037e-03, 7.56506931e-04, 3.71882574e-02, 1.94654356e-04,
                9.69788635e-02, 5.84415662e-01, 1.91709863e-03, 7.83784082e-04],
                [1.37289362e-03, 5.53533258e-03, 2.66839389e-03, 6.75667314e-03,
                1.62723042e-03, 9.01536282e-03, 9.09319542e-01, 2.17125622e-04,
                7.19851284e-03, 1.79541980e-04, 4.47759653e-02, 4.29906003e-05,
                9.11566456e-03, 1.60346734e-03, 1.49820434e-04, 4.21482338e-04],
                [7.93168480e-04, 3.36752609e-02, 1.11738500e-03, 2.98062914e-03,
                3.09316157e-02, 7.68556903e-01, 1.49263846e-01, 2.37793663e-03,
                2.85519564e-03, 1.24727383e-04, 5.47566009e-04, 8.47046898e-04,
                3.06135354e-03, 2.21353038e-04, 2.19930512e-03, 4.46707547e-04]]]
        )
        self.assertTrue(np.allclose(y[7:9], expected_y))


class test_lstm_cell_forward(unittest.TestCase):

    def setUp(self):
        pass

    def test_example_case(self):
        np.random.seed(1)
        batch_size = 10
        n_x = 3
        n_a = 5
        n_y = 2
        x_t = np.random.randn(batch_size, n_x)
        a_prev = np.random.randn(batch_size, n_a)
        m_prev = np.random.randn(batch_size, n_a)

        W_f = np.random.randn(n_a + n_x, n_a)
        b_f = np.random.randn(n_a)
        W_u = np.random.randn(n_a + n_x, n_a)
        b_u = np.random.randn(n_a)
        W_m = np.random.randn(n_a + n_x, n_a)
        b_m = np.random.randn(n_a)
        W_o = np.random.randn(n_a + n_x, n_a)
        b_o = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a_t, m_t, y_t = lstm_cell_forward(x_t, a_prev, m_prev, (W_f, b_f, W_u, b_u, W_m, b_m, W_o, b_o, W_y, b_y))

        self.assertEqual(a_t.shape, (10, 5))
        expected_a_t = np.array(
           [[ 3.25750872e-01, -3.81897423e-01,  3.16448743e-02,
                3.99108298e-01, -2.72217819e-03],
            [-2.89068935e-03, -5.33400136e-01, -5.49719751e-02,
                -5.30904918e-01,  8.67760868e-01],
            [-1.58617268e-01, -7.23716164e-02,  1.16429016e-02,
                -5.76230118e-01, -4.65597476e-04],
            [ 1.97506382e-04, -4.59150798e-01, -2.41939911e-02,
                3.38261057e-01,  9.17726701e-01],
            [-7.50002457e-01,  3.38755346e-01,  1.54272069e-02,
                3.63134033e-02, -8.43977349e-03],
            [ 1.93911488e-01, -5.48138301e-01, -1.77755072e-01,
                -7.42318494e-01,  2.09989765e-01],
            [-4.61251568e-02, -5.43347414e-01,  4.97451715e-01,
                -9.32193487e-02,  4.24254012e-01],
            [ 1.49187743e-01, -7.68532105e-02, -9.30995355e-01,
                8.60177595e-01,  3.45315709e-01],
            [-1.35431354e-01, -1.09955816e-01,  1.84357435e-01,
                -8.13694763e-02, -8.38475022e-02],
            [-7.31554201e-02,  3.24295441e-02, -6.14673775e-03,
                -2.98825279e-01,  7.26909034e-01]]         
        )
        self.assertTrue(np.allclose(a_t, expected_a_t))

        self.assertEqual(m_t.shape, (10, 5))
        expected_m_t = np.array(
            [[ 6.21746386e-01, -5.83072207e-01,  1.70290959e-01,
                9.42281963e-01, -1.14102434e-02],
            [-8.63499385e-01, -9.11005979e-01, -7.35045659e-02,
                -6.77149440e-01,  2.12813213e+00],
            [-2.55962426e-01, -6.72128520e-01,  1.14310158e-01,
                -1.26569333e+00, -2.17727479e-03],
            [ 4.45514608e-02, -8.36932442e-01, -2.44130779e-02,
                7.71182769e-01,  1.67490388e+00],
            [-9.80546440e-01,  1.35355205e+00,  8.28821217e-01,
                6.66573038e-02, -1.30137508e-01],
            [ 3.06658906e-01, -8.60913568e-01, -2.21815579e-01,
                -1.15825639e+00,  4.85620294e-01],
            [-1.49921826e-01, -6.48453171e-01,  6.26992863e-01,
                -1.29814628e-01,  9.92407476e-01],
            [ 3.63407317e-01, -6.47496536e-01, -2.47110617e+00,
                1.57389328e+00,  5.30176577e-01],
            [-9.70562569e-01, -1.35730867e+00,  9.59856281e-01,
                -1.40277383e-01, -1.23605730e-01],
            [-1.90337900e-01,  1.07943062e+00, -3.08788736e-02,
                -1.29644488e+00,  1.12907991e+00]]         
        )
        self.assertTrue(np.allclose(m_t, expected_m_t))

        self.assertEqual(y_t.shape, (10, 2))
        expected_y_t = np.array(
           [[0.62151305, 0.37848695],
            [0.30848385, 0.69151615],
            [0.50052146, 0.49947854],
            [0.5089911 , 0.4910089 ],
            [0.69011084, 0.30988916],
            [0.23325219, 0.76674781],
            [0.64603728, 0.35396272],
            [0.3160341 , 0.6839659 ],
            [0.65981298, 0.34018702],
            [0.63339475, 0.36660525]]
        )
        self.assertTrue(np.allclose(y_t, expected_y_t))


    def test_bigger_case(self):
        np.random.seed(1)
        batch_size = 64
        n_x = 4
        n_a = 8
        n_y = 16
        x_t = np.random.randn(batch_size, n_x)
        a_prev = np.random.randn(batch_size, n_a)
        m_prev = np.random.randn(batch_size, n_a)

        W_f = np.random.randn(n_a + n_x, n_a)
        b_f = np.random.randn(n_a)
        W_u = np.random.randn(n_a + n_x, n_a)
        b_u = np.random.randn(n_a)
        W_m = np.random.randn(n_a + n_x, n_a)
        b_m = np.random.randn(n_a)
        W_o = np.random.randn(n_a + n_x, n_a)
        b_o = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a_t, m_t, y_t = lstm_cell_forward(x_t, a_prev, m_prev, (W_f, b_f, W_u, b_u, W_m, b_m, W_o, b_o, W_y, b_y))

        self.assertEqual(a_t.shape, (64, 8))
        expected_a_t = np.array(
          [[-4.91737829e-01,  7.98469404e-02,  1.09959431e-03,
                -2.30383478e-01, -4.88943920e-01, -4.58205469e-02,
                -4.98952116e-03, -1.36294308e-01],
            [ 7.69087528e-02, -5.25233487e-01,  5.28352861e-02,
                1.56159981e-03,  1.87257341e-01, -3.42801055e-04,
                -1.30388172e-04, -1.69494522e-02],
            [-8.68246297e-01, -1.55644082e-01,  9.59888508e-02,
                -5.46560724e-02, -4.52914202e-02, -4.05540460e-01,
                4.82009763e-01,  4.79373836e-01],
            [ 9.34392394e-02, -2.45582974e-03, -8.06597259e-01,
                5.99563667e-02,  1.45752350e-01, -1.91261813e-01,
                -2.17774097e-02,  9.17338689e-01],
            [ 3.67424847e-01,  2.09222263e-04,  1.39948641e-02,
                1.85391042e-01,  4.04501600e-01,  1.29974702e-03,
                -2.84842328e-03, -8.54658819e-03],
            [-8.82330666e-02,  6.37075141e-02, -8.11661924e-04,
                -7.73207912e-03, -1.97757863e-02, -7.38780162e-02,
                -1.97732252e-04, -6.74142768e-03],
            [-7.02573636e-04, -5.30300753e-03,  2.74225520e-01,
                -3.89221889e-01,  7.62665617e-01,  8.06558450e-02,
                -2.23609716e-03,  7.52818366e-03],
            [-1.80809915e-01,  4.49843268e-01,  4.60098183e-01,
                -4.49984260e-03,  8.10565941e-01, -1.04003847e-01,
                -1.02548033e-02, -1.12873909e-01]]            
        )
        self.assertTrue(np.allclose(a_t[32:40], expected_a_t))

        self.assertEqual(m_t.shape, (64, 8))
        expected_m_t = np.array(
           [[-5.81127208e-01,  5.60410336e-01,  2.47606272e-02,
                -4.49211348e-01, -5.47297184e-01, -6.24509969e-02,
                -2.88434697e-01, -9.48860948e-01],
            [ 1.88506869e+00, -8.16562301e-01,  6.08996863e-01,
                1.00619413e+00,  1.89498003e-01, -4.29584340e-01,
                -1.13015920e-03, -4.61231773e-01],
            [-2.19543763e+00, -1.68322568e-01,  2.41050103e-01,
                -8.38246055e-01, -4.43862859e-01, -1.43933270e+00,
                8.95998286e-01,  9.99958272e-01],
            [ 2.07351056e+00, -8.47035963e-01, -1.12109438e+00,
                1.93005556e-01,  5.96807774e-01, -2.23870222e-01,
                -2.53660726e-01,  1.58302239e+00],
            [ 4.28594455e-01,  1.40390519e+00,  1.39959133e-02,
                1.88511061e-01,  4.29231112e-01,  7.48409146e-02,
                -7.46848026e-01, -5.22502154e-02],
            [-6.19481146e-01,  6.91627138e-02, -2.28068184e-02,
                -1.53854732e+00, -1.98663017e-02, -6.39166664e-01,
                -5.34690009e-04, -4.32195379e-01],
            [-2.05776529e-02, -5.31505612e-03,  2.12518862e+00,
                -6.31142786e-01,  1.04234509e+00,  3.92607960e-01,
                -7.81500382e-02,  1.38898277e+00],
            [-1.89162808e-01,  4.85701203e-01,  1.19598341e+00,
                -1.06764422e-01,  1.13078020e+00, -2.65998596e-01,
                -7.63076005e-02, -4.03011082e-01]]
        )
        self.assertTrue(np.allclose(m_t[32:40], expected_m_t))

        self.assertEqual(y_t.shape, (64, 16))
        expected_y_t = np.array(
           [[0.0066681 , 0.00384941, 0.02857969, 0.01486371, 0.03806712,
                0.0157442 , 0.0864226 , 0.10945616, 0.01364204, 0.037577  ,
                0.03776702, 0.04260431, 0.43363197, 0.00368154, 0.05761935,
                0.06982579],
            [0.00862346, 0.03772164, 0.02201289, 0.11203386, 0.02328332,
                0.05858141, 0.02651788, 0.10249539, 0.00992843, 0.02813409,
                0.0432016 , 0.09709694, 0.11401339, 0.01040625, 0.17973194,
                0.1262175 ],
            [0.02579285, 0.00209591, 0.09506054, 0.02258178, 0.05614666,
                0.04247621, 0.02152766, 0.10580507, 0.00192611, 0.10107454,
                0.01726707, 0.02994868, 0.37506721, 0.00221208, 0.0142337 ,
                0.08678393],
            [0.00253644, 0.00153359, 0.01117412, 0.0099545 , 0.00118647,
                0.01876744, 0.00781913, 0.00294205, 0.00631306, 0.01531985,
                0.17062169, 0.55354335, 0.01152936, 0.00228755, 0.02200325,
                0.16246814],
            [0.00667364, 0.01982137, 0.01440591, 0.11209378, 0.02196442,
                0.08095185, 0.02166277, 0.02609063, 0.01364415, 0.01848797,
                0.08832221, 0.04279487, 0.04111268, 0.07020879, 0.13674716,
                0.2850178 ],
            [0.00954028, 0.01015077, 0.03215926, 0.05250043, 0.0362254 ,
                0.04887993, 0.05310658, 0.06495353, 0.01758568, 0.03724895,
                0.08147994, 0.06256277, 0.16999382, 0.02181103, 0.1056208 ,
                0.19618084],
            [0.0267161 , 0.01523785, 0.01713021, 0.07023973, 0.01041253,
                0.05160283, 0.01916292, 0.04704973, 0.00223313, 0.0177532 ,
                0.03924545, 0.02831873, 0.18519515, 0.02581926, 0.09829172,
                0.34559148],
            [0.03063318, 0.00522812, 0.03413197, 0.07662564, 0.03998068,
                0.07394977, 0.01643584, 0.02566809, 0.00399158, 0.02181378,
                0.0287005 , 0.00692148, 0.21380159, 0.11588795, 0.06352332,
                0.24270651]]
        )
        self.assertTrue(np.allclose(y_t[32:40], expected_y_t))


class test_lstm_forward(unittest.TestCase):

    def setUp(self):
        pass

    def test_example_case(self):
        np.random.seed(1)
        batch_size = 10
        sequence_length = 8
        n_x = 3
        n_a = 5
        n_y = 2
        x = np.random.randn(batch_size, sequence_length, n_x)
        a_init = np.random.randn(batch_size, n_a)

        W_f = np.random.randn(n_a + n_x, n_a)
        b_f = np.random.randn(n_a)
        W_u = np.random.randn(n_a + n_x, n_a)
        b_u = np.random.randn(n_a)
        W_m = np.random.randn(n_a + n_x, n_a)
        b_m = np.random.randn(n_a)
        W_o = np.random.randn(n_a + n_x, n_a)
        b_o = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a, m, y = lstm_forward(x, a_init, (W_f, b_f, W_u, b_u, W_m, b_m, W_o, b_o, W_y, b_y))

        self.assertEqual(a.shape, (10, 8, 5))
        expected_a = np.array(
           [[[-0.03997298, -0.72688124, -0.63477092,  0.22377101,
                0.13775771],
                [ 0.01176905,  0.0438648 , -0.25590659,  0.01049051,
                -0.02740805],
                [-0.10733464, -0.032584  ,  0.24730554, -0.00112008,
                -0.10486625],
                [-0.10142668,  0.36952194,  0.09171265, -0.14041553,
                -0.00396974],
                [-0.42937375,  0.22350593,  0.59129023, -0.18438095,
                -0.13236818],
                [-0.27068251,  0.86443675,  0.00944506, -0.08351103,
                0.12033612],
                [-0.45278996,  0.80256682,  0.01732543, -0.15196299,
                0.41628205],
                [-0.39953108,  0.49893691,  0.05487258, -0.15734085,
                -0.19687967]],

            [[-0.05112887, -0.25486262,  0.00380452,  0.37722079,
                0.46502696],
                [-0.46143325,  0.0100703 ,  0.50398845,  0.34331927,
                0.01099946],
                [-0.21180419,  0.5739811 ,  0.08314876, -0.0090901 ,
                0.34844701],
                [-0.50440556, -0.03649546,  0.35347639,  0.02551728,
                0.10759616],
                [ 0.01973211,  0.59470876, -0.09909602, -0.14854819,
                0.09286855],
                [-0.33227803,  0.09826226, -0.43225642, -0.11169211,
                -0.20695214],
                [-0.41152186, -0.27740546, -0.52928888, -0.13648203,
                0.13458264],
                [-0.43788287, -0.31745085, -0.39289078, -0.13594421,
                0.18778275]]]
        )
        self.assertTrue(np.allclose(a[7:9], expected_a))

        self.assertEqual(m.shape, (10, 8, 5))
        expected_m = np.array(
           [[[-1.26502269e-01, -9.60265496e-01, -8.28206974e-01,
                4.05723129e-01,  1.38947683e-01],
                [ 4.14954822e-01,  3.69631493e-01, -2.83550666e-01,
                6.81845267e-02, -5.37136497e-01],
                [-2.61700323e-01, -9.96543206e-02,  2.69288613e-01,
                -1.34519496e-03, -3.72663236e-01],
                [-2.86033103e-01,  8.67681390e-01,  1.07051137e-01,
                -2.13393048e-01, -1.38043506e-02],
                [-8.55212787e-01,  1.17300579e+00,  7.88548868e-01,
                -2.20008192e-01, -8.67287875e-01],
                [-8.19976174e-01,  1.39648853e+00,  1.01174968e-02,
                -1.79570423e-01,  1.32147072e-01],
                [-1.05193139e+00,  1.77171448e+00,  1.78658701e-02,
                -2.78525540e-01,  5.93738720e-01],
                [-1.42316698e+00,  2.02569253e+00,  5.58707947e-02,
                -3.29029151e-01, -3.27572307e-01]],

            [[-8.02818254e-01, -9.74639286e-01,  3.99602680e-03,
                6.91718750e-01,  8.74521799e-01],
                [-1.35449302e+00,  3.87694024e-01,  7.51085075e-01,
                3.98049765e-01,  1.32324477e-01],
                [-1.66432421e+00,  1.21243775e+00,  8.93933763e-02,
                -1.61989343e-02,  5.55129439e-01],
                [-1.97744258e+00, -6.15791307e-02,  3.72700272e-01,
                3.03055901e-02,  1.22702894e-01],
                [ 2.10348067e-02,  7.83751508e-01, -9.88388488e-01,
                -1.66466935e-01,  1.75096484e-01],
                [-4.41142148e-01,  3.28901194e-01, -4.87590925e-01,
                -1.17643811e-01, -5.23047522e-01],
                [-6.64562130e-01, -4.77961949e-01, -8.50852321e-01,
                -1.52969559e-01,  5.17521664e-01],
                [-7.93388012e-01, -9.72020673e-01, -6.57143153e-01,
                -1.56386395e-01,  1.44871056e+00]]]
        )
        self.assertTrue(np.allclose(m[7:9], expected_m))

        self.assertEqual(y.shape, (10, 8, 2))
        expected_y = np.array(
           [[[0.95657907, 0.04342093],
                [0.81722146, 0.18277854],
                [0.81708592, 0.18291408],
                [0.7014734 , 0.2985266 ],
                [0.683333  , 0.316667  ],
                [0.44685794, 0.55314206],
                [0.53207799, 0.46792201],
                [0.52644165, 0.47355835]],

            [[0.91958029, 0.08041971],
                [0.74080828, 0.25919172],
                [0.66021894, 0.33978106],
                [0.79966449, 0.20033551],
                [0.64605547, 0.35394453],
                [0.71661453, 0.28338547],
                [0.8840997 , 0.1159003 ],
                [0.89658278, 0.10341722]]]
        )
        self.assertTrue(np.allclose(y[7:9], expected_y))

    def test_bigger_case(self):
        np.random.seed(1)
        batch_size = 64
        sequence_length = 8
        n_x = 4
        n_a = 8
        n_y = 16
        x = np.random.randn(batch_size, sequence_length, n_x)
        a_init = np.random.randn(batch_size, n_a)

        W_f = np.random.randn(n_a + n_x, n_a)
        b_f = np.random.randn(n_a)
        W_u = np.random.randn(n_a + n_x, n_a)
        b_u = np.random.randn(n_a)
        W_m = np.random.randn(n_a + n_x, n_a)
        b_m = np.random.randn(n_a)
        W_o = np.random.randn(n_a + n_x, n_a)
        b_o = np.random.randn(n_a)
        W_y = np.random.randn(n_a, n_y)
        b_y = np.random.randn(n_y)

        a, m, y = lstm_forward(x, a_init, (W_f, b_f, W_u, b_u, W_m, b_m, W_o, b_o, W_y, b_y))

        self.assertEqual(a.shape, (64, 8, 8))
        expected_a = np.array(
           [[[ 6.52778487e-01,  1.48172621e-01,  5.07345422e-03,
                6.89063905e-01, -1.26604871e-01, -4.22635525e-04,
                -3.75592112e-01,  3.66527570e-05],
                [ 6.28790211e-01, -1.21902083e-01,  1.27269528e-01,
                5.05954037e-01,  1.06325401e-01,  2.34852698e-01,
                -7.71134247e-02,  4.84732391e-02],
                [-3.67486095e-02, -6.32031194e-01,  3.53881950e-01,
                -2.35921551e-01, -2.44430114e-02,  4.33832017e-01,
                -6.62603032e-02,  1.50119647e-03],
                [-1.22692442e-01,  2.38985972e-02,  1.46795448e-01,
                9.55899389e-03,  6.91634532e-01, -5.02854256e-01,
                -8.36043927e-01,  4.78113408e-02],
                [-2.26880188e-01, -4.37652206e-01, -1.46812302e-01,
                -1.12716543e-01,  1.72505487e-01, -6.30658150e-01,
                -2.96928942e-01, -1.18148882e-02],
                [ 3.09875167e-01, -3.20416401e-01, -2.59684635e-01,
                3.81550336e-01, -3.28704271e-02, -1.26663524e-01,
                -2.87254678e-01, -3.91680515e-02],
                [-7.93783615e-02, -1.89538011e-02,  2.48320478e-01,
                3.01872422e-01, -1.04633205e-02, -3.22393416e-01,
                -4.15354004e-01, -5.81565107e-01],
                [ 4.86213141e-01,  7.19409732e-02,  3.15788693e-04,
                5.02850208e-01, -1.53417090e-01,  2.61256526e-01,
                -1.20431544e-02,  4.36318025e-04]],

            [[-2.81609809e-01, -7.30713634e-01,  7.57202382e-02,
                -2.16217338e-01, -3.65360846e-03, -6.29929799e-01,
                -3.83303111e-02, -5.44218138e-02],
                [-5.09079948e-01, -3.13819309e-03, -5.88818800e-01,
                2.86507777e-02,  4.01612749e-02, -1.30006830e-01,
                2.06275275e-02, -7.90899925e-01],
                [ 1.76651150e-01,  8.02396758e-02, -4.48807303e-01,
                -1.36583052e-01,  2.54087539e-02,  7.02532649e-02,
                2.17268077e-01, -1.24574035e-01],
                [ 6.61917922e-01,  3.78494352e-02, -7.22283127e-02,
                1.79284932e-01,  1.31139367e-02,  1.36113019e-01,
                2.01541308e-01, -8.48028422e-01],
                [-1.44366146e-03, -9.40239253e-02,  3.46175326e-01,
                -5.78965195e-01, -3.07008404e-03,  4.04689416e-01,
                -8.07494376e-02, -3.82434341e-02],
                [ 4.29825592e-01, -1.83097306e-01,  3.10351102e-03,
                4.16200627e-01, -3.49657084e-01,  1.01296300e-02,
                -8.08987754e-02,  8.05740774e-03],
                [ 7.24437130e-01,  7.88462125e-02,  9.16107346e-02,
                3.45056877e-01, -7.38227783e-02,  1.73733448e-01,
                4.88975942e-02,  3.06733596e-02],
                [ 3.51871785e-01,  2.94650096e-02,  2.82995084e-01,
                2.96883078e-01, -6.38910329e-02,  2.34610850e-01,
                -6.46542015e-02, -2.36495098e-03]]]
        )
        self.assertTrue(np.allclose(a[7:9], expected_a))

        self.assertEqual(m.shape, (64, 8, 8))
        expected_m = np.array(
           [[[ 0.92993136,  0.15095876,  0.35876662,  0.86304902,
                -0.14207027, -0.04085604, -0.45632271,  0.10649198],
                [ 0.85273668, -0.20423569,  0.28678864,  0.79036987,
                0.19000339,  0.25973401, -0.61569612,  0.06659164],
                [-0.24754226, -1.01330587,  1.09020089, -0.24464662,
                -0.05727459,  0.51810167, -1.4082966 ,  0.13745785],
                [-0.15405079,  0.63734928,  0.51322917,  0.11342392,
                0.85218962, -0.74129542, -1.39178282,  0.08775658],
                [-0.23768688, -0.78502616, -0.18854925, -0.152429  ,
                0.61003432, -0.90520663, -1.65649367, -0.07773912],
                [ 0.34493347, -0.42839023, -0.56006277,  0.77164173,
                -0.14832293, -0.25663891, -0.9768314 , -0.17473611],
                [-0.09596357, -1.06269211,  0.25382675,  0.47589977,
                -0.02496492, -0.34444121, -0.72166503, -0.7984747 ],
                [ 0.67872761,  0.07332422,  0.18061691,  0.99743593,
                -0.2752152 ,  0.66356006, -0.1427875 ,  0.02431971]],

            [[-0.99877888, -0.95341156,  0.09116109, -0.2518248 ,
                -0.01747259, -0.95301537, -0.4219529 , -0.79754529],
                [-0.5781925 , -0.1066224 , -0.69086174,  0.11812972,
                0.39477796, -0.16179826,  0.03632984, -1.1744068 ],
                [ 0.48303588,  0.09870988, -0.72212683, -0.20995042,
                0.08193625,  0.31495675,  0.39599125, -0.9521723 ],
                [ 1.06082509,  0.13005072, -0.08051578,  0.27577687,
                0.04474499,  0.25942398,  0.47815847, -1.33173309],
                [-0.01108819, -0.51323816,  0.46242248, -0.6887607 ,
                -0.003972  ,  0.46383031, -0.23877041, -0.51898359],
                [ 0.93424682, -0.22420604,  0.37590914,  0.77640596,
                -0.37252623,  0.06477626, -0.11994667,  0.04076822],
                [ 1.10525995,  0.29107033,  0.17789799,  1.01331178,
                -0.09034958,  0.21083988,  0.12008564,  0.03430575],
                [ 0.6556312 ,  0.06994129,  0.56466677,  0.33256616,
                -0.09799591,  0.26588518, -0.39515151, -0.00460749]]]
        )
        self.assertTrue(np.allclose(m[7:9], expected_m))

        self.assertEqual(y.shape, (64, 8, 16))
        expected_y = np.array(
           [[[1.30883680e-01, 8.19548550e-02, 1.70878512e-03, 3.20096078e-02,
                1.22913574e-02, 6.44555014e-02, 2.08466826e-02, 1.52594050e-01,
                2.63362626e-01, 9.92109560e-02, 1.36451357e-02, 3.03986019e-02,
                5.32200978e-02, 3.82329923e-03, 3.25352824e-02, 7.05948185e-03],
                [9.76273939e-02, 1.26573902e-01, 3.62163708e-03, 4.47828737e-02,
                2.48394200e-02, 4.29866420e-02, 2.09948256e-02, 1.08625172e-01,
                3.29017394e-01, 1.04031441e-01, 1.36363973e-02, 2.16120330e-02,
                1.24845641e-02, 5.20081706e-03, 3.21127031e-02, 1.18527848e-02],
                [3.69472918e-02, 4.26265673e-02, 3.04305540e-02, 5.47845068e-02,
                2.89223866e-01, 2.04129461e-02, 3.38004250e-02, 1.51783561e-01,
                1.36027033e-01, 7.06111471e-02, 2.38805409e-02, 8.84847375e-03,
                1.01311008e-02, 4.05547950e-02, 2.92886413e-02, 2.06485499e-02],
                [3.01801446e-03, 1.35502687e-02, 2.11038840e-03, 2.30762551e-03,
                5.12155457e-03, 2.90859676e-03, 1.00951265e-02, 4.51386429e-02,
                8.66945681e-01, 1.79573184e-03, 5.53495821e-03, 1.96879202e-03,
                2.96999018e-02, 1.87938449e-03, 3.79005788e-03, 4.13527535e-03],
                [1.36340290e-02, 1.50841000e-02, 3.37211874e-02, 1.18630876e-02,
                4.52633170e-02, 9.17256034e-03, 1.31800610e-01, 3.21812943e-01,
                2.90274463e-01, 3.47312803e-02, 1.43396042e-02, 7.39473335e-03,
                4.84826915e-02, 1.09501969e-02, 5.67391501e-03, 5.80128052e-03],
                [5.73108776e-02, 3.00180798e-02, 5.95709422e-03, 3.32880362e-02,
                2.55281685e-02, 3.91622441e-02, 6.34676175e-02, 3.62345168e-01,
                2.24377288e-01, 7.44494637e-02, 9.62510460e-03, 1.15055079e-02,
                4.12428925e-02, 5.80150051e-03, 1.10782724e-02, 4.84268398e-03],
                [3.85715334e-02, 7.04733050e-02, 9.09680392e-03, 1.09590838e-02,
                1.01817021e-01, 2.13309071e-02, 4.59005372e-02, 6.13661540e-02,
                2.52629835e-01, 1.30826444e-01, 3.55173472e-02, 1.79473814e-02,
                1.43616878e-01, 8.34353591e-03, 4.31960132e-02, 8.40721910e-03],
                [1.32442317e-01, 7.50542074e-02, 3.49400730e-03, 4.71792662e-02,
                3.79127829e-02, 6.01250017e-02, 2.34152575e-02, 1.24287410e-01,
                1.60243418e-01, 2.08334038e-01, 1.80566897e-02, 4.15970461e-02,
                1.83114556e-02, 7.00765713e-03, 3.62065258e-02, 6.33291835e-03]],

            [[1.45554102e-02, 1.72243196e-02, 1.17013353e-01, 1.34843006e-02,
                1.09297726e-01, 6.94861782e-03, 1.88397405e-01, 2.46906158e-01,
                1.27210718e-01, 7.36819534e-02, 1.66765758e-02, 7.82333231e-03,
                2.53473822e-02, 1.92276343e-02, 6.98184664e-03, 9.22326753e-03],
                [2.04504683e-02, 1.25817142e-02, 6.65333165e-03, 1.25312158e-02,
                2.49050162e-01, 1.82379660e-02, 9.24713610e-02, 1.06747455e-01,
                9.29291818e-02, 2.62716617e-01, 2.72743921e-02, 1.27688542e-02,
                6.74686669e-02, 7.32244414e-03, 1.00301905e-02, 7.65979976e-04],
                [6.31447353e-02, 4.00385232e-02, 5.40586161e-03, 4.39505116e-02,
                9.01845705e-02, 2.43030216e-02, 5.01491031e-02, 2.08210952e-01,
                1.05409876e-01, 2.43244294e-01, 4.17831156e-02, 2.62040021e-02,
                2.49253759e-02, 1.40047990e-02, 1.59644502e-02, 3.07680868e-03],
                [7.26881848e-02, 1.91383753e-01, 8.77277009e-04, 2.04675994e-02,
                6.81544563e-02, 1.36867641e-02, 1.36640765e-02, 2.04225983e-02,
                3.78190263e-02, 4.31819374e-01, 4.29258973e-02, 9.19684716e-03,
                3.13761403e-02, 3.54349449e-03, 3.81087621e-02, 3.86574927e-03],
                [3.93737763e-02, 6.21394515e-02, 1.14649325e-02, 4.31374054e-02,
                3.00920503e-01, 1.32895487e-02, 1.54926187e-02, 8.75556882e-02,
                1.01527297e-01, 7.50397001e-02, 8.27470831e-02, 1.45517363e-02,
                2.22470635e-02, 6.16244206e-02, 4.94257494e-02, 1.94630263e-02],
                [1.21662827e-01, 4.75083036e-02, 7.75651253e-03, 4.41464462e-02,
                4.12550715e-02, 5.09098072e-02, 4.42387352e-02, 2.18940721e-01,
                9.13226784e-02, 2.11845090e-01, 1.63183645e-02, 3.05539482e-02,
                3.03852769e-02, 9.76259972e-03, 2.62070354e-02, 7.18658210e-03],
                [1.40702976e-01, 1.45303238e-01, 2.92219981e-03, 4.78370094e-02,
                2.82196679e-02, 3.81812259e-02, 1.84122169e-02, 9.75691868e-02,
                1.44681683e-01, 1.97380894e-01, 2.66878877e-02, 3.45423109e-02,
                1.76737193e-02, 7.42158086e-03, 4.16970729e-02, 1.07671302e-02],
                [9.68939297e-02, 1.06070361e-01, 6.74446647e-03, 3.97711236e-02,
                6.64264732e-02, 3.92977558e-02, 2.10204013e-02, 8.63427880e-02,
                2.14692441e-01, 1.56043344e-01, 2.90186006e-02, 3.82991273e-02,
                1.93093150e-02, 1.23225495e-02, 5.41995836e-02, 1.35477403e-02]]]
        )
        self.assertTrue(np.allclose(y[7:9], expected_y))
